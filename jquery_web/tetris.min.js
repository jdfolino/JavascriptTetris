(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.TetrisFactory = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = Grid;

function Grid(x, y) {
    this.x = x;
    this.y = y;
    this.rows = [];

    for (var i = 0; i < this.y; i++) {
        this.rows.push([]);
        for (var j = 0; j < this.x; j++) {
            this.rows[i].push(false);
        }
    }

    this.addNewRow = function () {
        var row_to_add = [];
        for (var d = 0; d < this.x; d++) {
            row_to_add.push(false);
        }
        this.rows.push(row_to_add);
    };

    this.fill = function(piece) {
        var coordinates = piece.gridItemsOccupied();
        for (var i = 0; i < coordinates.length; i++) {
            var x = coordinates[i][0];
            var y = coordinates[i][1];
            this.rows[y][x] = true;
        }
        return true;
    };

    this.explodeCompleteLines = function (linesAlreadyExploded) {
        function findRowToDelete(me) {
            var rows_to_delete = null;
            for (var i = 0; i < me.rows.length; i++) {
                if (me.rows[i].filter(function (cell) {
                        return cell === true;
                    }).length === me.rows[i].length) {
                    rows_to_delete = i;
                    break;
                }
            }
            return rows_to_delete;
        }

        var row_to_delete = findRowToDelete(this);
        if (row_to_delete === null) {
            return linesAlreadyExploded;
        }

        this.rows.splice(row_to_delete, 1);
        this.addNewRow();
        return this.explodeCompleteLines(linesAlreadyExploded + 1);

    };
}
},{}],2:[function(require,module,exports){
module.exports = BasePiece;

function BasePiece(x, y, d) {
    this.x_coord = x;
    this.y_coord = y;
    this.direction = d;

    this.name = "BasePiece";

    this.rotateClockwise = function () {
        this.direction = (this.direction + 90) % 360;
    };

    this.rotateAntiClockwise = function () {
        this.direction = (this.direction - 90) % 360;
        if (this.direction < 0) {
            this.direction = 360 + this.direction;
        }
    };

    this.up = function () {
        this.y_coord = this.y_coord + 1;
    };

    this.down = function () {
        this.y_coord = this.y_coord - 1;
    };

    this.left = function () {
        this.x_coord = this.x_coord - 1;
    };

    this.right = function () {
        this.x_coord = this.x_coord + 1;
    };

    this.calcGridItemsOccupied = function(northCoordinates, x, y, direction) {
        var eastCoordinates = northCoordinates.map(function (array) { return [array[1] , array[0]]; });
        var southCoordinates = northCoordinates.map(function (array) { return [array[0] * -1, array[1] * -1]; });
        var westCoordinates = eastCoordinates.map(function (array) { return [array[0] * -1, array[1] * -1]; });

        if (direction === 0) {
            return northCoordinates.map(function (array) { return [array[0] + x, array[1] + y]; });
        }
        else if (direction === 90) {
            return eastCoordinates.map(function (array) { return [array[0] + x, y-  array[1] ]; });
        }
        else if (direction === 180) {
            return southCoordinates.map(function (array) { return [array[0] + x, array[1] + y]; });
        }
        else if (direction === 270) {
            return westCoordinates.map(function (array) { return [array[0] + x, y-array[1]]; });
        }
        return null;

    };

}


},{}],3:[function(require,module,exports){
var BasePiece = require('./basePiece');

module.exports = LeftDownwardBar;
function LeftDownwardBar(x, y,d) {
    BasePiece.call(this, x,y,d);
    this.prototype = Object.create(BasePiece.prototype);
    this.gridItemsOccupied = function () {
        return this.calcGridItemsOccupied([ [0, 0], [0, 1], [-1, 1], [-1, 2] ], this.x_coord, this.y_coord, this.direction);
    };
    this.name = "LeftDownwardBar";
    this.clone = function(){
        return new LeftDownwardBar(this.x_coord,this.y_coord, this.direction);
    };
}

},{"./basePiece":2}],4:[function(require,module,exports){
var BasePiece = require('./basePiece');
module.exports = LeftLBar;

function LeftLBar(x, y, d) {
    BasePiece.call(this, x, y, d);
    this.prototype = Object.create(BasePiece.prototype);
    this.gridItemsOccupied = function () {
        return this.calcGridItemsOccupied([[0, 0], [0, 1], [0, 2], [1, 0]], this.x_coord, this.y_coord, this.direction);
    };
    this.name = "LeftLBar";
    this.clone = function () {
        return new LeftLBar(this.x_coord, this.y_coord, this.direction);
    };
}

},{"./basePiece":2}],5:[function(require,module,exports){
var BasePiece = require('./basePiece');
module.exports = LongBar;

function LongBar(x, y,d) {
    BasePiece.call(this, x,y,d);
    this.prototype = Object.create(BasePiece.prototype);
    this.gridItemsOccupied = function () {
        return this.calcGridItemsOccupied([ [0, 0], [0, 1], [0, 2], [0, 3]], this.x_coord, this.y_coord, this.direction);
    };
    this.name = "LongBar";
    this.clone = function(){
        return new LongBar(this.x_coord,this.y_coord, this.direction);
    };
}

},{"./basePiece":2}],6:[function(require,module,exports){
var LongBar = require('./longBar');
var SquareBar = require('./squareBar');
var TBar = require('./tBar');
var LeftLBar = require('./leftLBar');
var LeftDownwardBar = require('./leftDownwardBar');
var RightLBar = require('./rightLBar');
var RightDownwardBar = require('./rightDownwardBar');
module.exports = PieceFactory;

function PieceFactory() {

    function random(min, max) {
        return min + Math.floor(Math.random() * (max - min + 1));
    }

    this.getPiece = function (grid) {
        var availablePieces = {
            0: SquareBar, 1: LongBar,
            2: TBar, 3: LeftDownwardBar,
            4: RightDownwardBar, 5: LeftLBar,
            6: RightLBar
        };
        return new availablePieces[random(0, 6)](grid.x - 2, grid.y - 2, 180);
    };

}


},{"./leftDownwardBar":3,"./leftLBar":4,"./longBar":5,"./rightDownwardBar":7,"./rightLBar":8,"./squareBar":9,"./tBar":10}],7:[function(require,module,exports){
var BasePiece = require('./basePiece');
module.exports = RightDownwardBar;
function RightDownwardBar(x, y,d) {
    BasePiece.call(this, x,y,d);
    this.prototype = Object.create(BasePiece.prototype);
    this.gridItemsOccupied = function () {
        return this.calcGridItemsOccupied([ [0, 0], [0, 1], [1, 1], [1, 2] ],
            this.x_coord, this.y_coord, this.direction);
    };
    this.name = "RightDownwardBar";
    this.clone = function(){
        return new RightDownwardBar(this.x_coord,this.y_coord, this.direction);
    };
}

},{"./basePiece":2}],8:[function(require,module,exports){
var BasePiece = require('./basePiece');
module.exports = RightLBar;
function RightLBar(x, y,d) {
    BasePiece.call(this, x,y,d);
    this.prototype = Object.create(BasePiece.prototype);
    this.gridItemsOccupied = function () {
        return this.calcGridItemsOccupied([ [0, 0], [1, 0], [2, 0], [0, 1] ], this.x_coord, this.y_coord, this.direction);
    };
    this.name = "RightLBar";
    this.clone = function(){
        return new RightLBar(this.x_coord,this.y_coord, this.direction);
    };
}

},{"./basePiece":2}],9:[function(require,module,exports){
var BasePiece = require('./basePiece');
module.exports = SquareBar;
function SquareBar(x, y,d) {
    BasePiece.call(this, x,y,d);
    this.prototype = Object.create(BasePiece.prototype);
    this.gridItemsOccupied = function () {
        return this.calcGridItemsOccupied([ [0, 0], [0, 1], [1, 1], [1, 0] ], this.x_coord, this.y_coord, this.direction);
    };
    this.name = "SquareBar";
    this.clone = function(){
        return new SquareBar(this.x_coord,this.y_coord, this.direction);
    };
}

},{"./basePiece":2}],10:[function(require,module,exports){
var BasePiece = require('./basePiece');
module.exports =TBar;
function TBar(x, y,d) {
    BasePiece.call(this, x,y,d);
    this.prototype = Object.create(BasePiece.prototype);
    this.gridItemsOccupied = function () {
        return this.calcGridItemsOccupied([ [0, 0], [0, 1], [-1, 0], [1, 0] ], this.x_coord, this.y_coord, this.direction);
    };
    this.name = "TBar";
    this.clone = function(){
        return new TBar(this.x_coord,this.y_coord, this.direction);
    };
}

},{"./basePiece":2}],11:[function(require,module,exports){
(function () {
    'use strict';
}());

var Grid = require('./grid');
var PieceFactory = require('./pieces/pieceFactory');

module.exports = Tetris;

function Tetris(grid, pieceQueue) {
    this.grid = grid;
    this.pieceQueue = pieceQueue;
    this.getNextPiece = function () {
        this.activePiece = this.pieceQueue.shift();
        this.pieceQueue.push(this.createRandomPiece(this.grid));
        return this.activePiece;
    };

    this.createRandomPiece = function (grid) {
        return createRandomPiece(grid);
    };

    function createRandomPiece(grid) {
        var piece = new PieceFactory().getPiece(grid);
        if (squaresAlreadyOccupied(piece, 0, 0)) {
            return false;
        }
        return piece;
    }

    this.initPieceQueue = function() {
        this.pieceQueue = [
            new PieceFactory().getPiece(this.grid),
            new PieceFactory().getPiece(this.grid),
            new PieceFactory().getPiece(this.grid),
            new PieceFactory().getPiece(this.grid)
        ];
    };

    this.level = function () {
        return Math.floor(this.linesCleared / 10);
    };

    this.pieceHitsGround = function() {
        this.grid.fill(this.activePiece);
        var noOfLinesExploded = grid.explodeCompleteLines(0);
        this.stats[noOfLinesExploded]++;
        this.linesCleared = this.linesCleared + noOfLinesExploded;
        this.score = this.score + (this.scoring_system[noOfLinesExploded] * (this.level() + 1));
        return this.getNextPiece();
    };

    this.rotateClockwise = function() {
        return this.tryMove('ROTATE_CLOCKWISE');
    };

    this.rotateAntiClockwise = function() {
        return this.tryMove('ROTATE_ANTI_CLOCKWISE');
    };

    this.moveDown = function() {
        return this.tryMove('DOWN');
    };

    this.moveLeft = function() {
        return this.tryMove('LEFT');
    };

    this.moveRight = function() {
        return this.tryMove('RIGHT');
    };

    function stillOnGrid(piece, x_transformation, y_transformation) {
        var coordinates = piece.gridItemsOccupied();
        for (var i = 0; i < coordinates.length; i++) {
            var x = coordinates[i][0];
            var y = coordinates[i][1];
            if (y < 0 || y + y_transformation >= grid.y || x < 0 || x + x_transformation >= grid.x) {
                return false;
            }
        }
        return true;
    }

    function squaresAlreadyOccupied(piece, x_transformation, y_transformation) {
        var coordinates = piece.gridItemsOccupied();
        for (var i = 0; i < coordinates.length; i++) {
            var x = coordinates[i][0];
            var y = coordinates[i][1];
            if (grid.rows[y + y_transformation][x + x_transformation] === true) {
                return true;
            }
        }
        return false;
    }

    this.tryMove = function (commandKey) {
        var command = {
            'DOWN': {move: 'down', x_transformation: 0, y_transformation: -1},
            'LEFT': {move: 'left', x_transformation: -1, y_transformation: 0},
            'RIGHT': {move: 'right', x_transformation: 1, y_transformation: 0},
            'ROTATE_ANTI_CLOCKWISE': {move: 'rotateAntiClockwise', x_transformation: 0, y_transformation: 0},
            'ROTATE_CLOCKWISE': {move: 'rotateClockwise', x_transformation: 0, y_transformation: 0}
        }[commandKey];

        var activePieceClone = this.activePiece.clone();
        activePieceClone[command.move]();
        var validMove = stillOnGrid(activePieceClone, 0, 0) &&
            squaresAlreadyOccupied(this.activePiece, command.x_transformation, command.y_transformation) === false;
        if (validMove) {
            this.activePiece[command.move]();
        }
        return validMove;
    };
}
},{"./grid":1,"./pieces/pieceFactory":6}],12:[function(require,module,exports){
(function () {
    'use strict';
}());

var Tetris = require('./tetris');
var Grid = require('./grid');

module.exports = TetrisFactory;

function TetrisFactory() {

    this.create = function(grid, pieceQueue, starting_interval) {
        if (grid === undefined) grid = new Grid(10, 20);
        if (starting_interval === undefined) starting_interval = 1;
        var tetrisGame = new Tetris(grid, pieceQueue, starting_interval);
        if (pieceQueue === undefined) {
            tetrisGame.initPieceQueue(pieceQueue);
        }
        var SCORING_SYSTEM = {
            0: 0,
            1: 100,
            2: 300,
            3: 500,
            4: 800
        };
        tetrisGame.scoring_system = SCORING_SYSTEM;
        tetrisGame.getNextPiece();
        tetrisGame.stats = { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0};
        tetrisGame.linesCleared = 0;
        tetrisGame.starting_interval = starting_interval;
        tetrisGame.score = 0;
        return tetrisGame;
    };

}
},{"./grid":1,"./tetris":11}]},{},[12])(12)
});